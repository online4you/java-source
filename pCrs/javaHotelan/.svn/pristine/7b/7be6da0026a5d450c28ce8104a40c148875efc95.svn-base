package com.photel.data.hotelan.ddbb;



import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;
import org.hibernate.Session;
import org.hibernate.Transaction;

import com.photel.commonServices.util.AppModelProperties;
import com.photel.data.hotelan.ddbb.hibernate.HibernateSessionFactory;
import com.photel.data.hotelan.ddbb.hibernate.pojo.HibernateHotel;
import com.photel.data.hotelan.ddbb.hibernate.pojo.HibernateHotelPK;
import com.photel.hotelan.client.IrqHotelDetailsList.Hotel;


public class HelperHibernateDDBBHotelan<C> {
    private AppModelProperties properties;	
	private Logger  log = Logger.getRootLogger();
	
	

	
	
	
	
	public HelperHibernateDDBBHotelan() throws IOException {
		super();
		properties = new AppModelProperties();
		
	}
	
	

	protected void finalize() throws Throwable {
		HibernateSessionFactory.closeSession();
		super.finalize();
	}
	public void clearSession(){
		Session ses = getSession();
		ses.clear();
		ses.flush();
	}

	public void closeSession(){
		HibernateSessionFactory.closeSession();
	}

	private Object copyClass(Object oFrom, Object oTo) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException{
		
		if (!oFrom.getClass().getName().equals(oTo.getClass().getName())){
			return null;
		}
		
	    Method[] allMethodsFrom;
	    Method[] allMethodsTo;
	    String mnameF;
	    String mnameIni;
	    String mnameSetter;
	    String mnameT;
	    allMethodsFrom = oFrom.getClass().getMethods();
	    allMethodsTo = oTo.getClass().getMethods();
	    for (Method mf : allMethodsFrom) {
	    	mnameF = mf.getName();
	    	mnameIni=mnameF.substring(0, 3);
	    	if (mnameIni.equals("get")){
	    		for (Method mt : allMethodsTo) {
	    			mnameT = mt.getName();
	    			mnameSetter="set"+mnameF.substring(3, mnameF.length());
	    	    	if (mnameSetter.equals(mnameT)){
	    	    		Object r1 = mf.invoke(oFrom);
	    	    		mt.invoke(oTo, r1);
	    	    	}
	    	    	
	     		}
	    	}
	    	
 		}
	   
		
		return oTo; 
	}
	
	public Object getInstance(String classe) throws ClassNotFoundException, InstantiationException, IllegalAccessException{
		Object ret=null;
		Class<Object> fc = (Class<Object>) Class.forName("com.globalia.data.gen.ddbb.hibernate.pojo."+classe);
		ret = fc.newInstance();
		return ret;
	}
	

	
	private Session getSession(){
		return HibernateSessionFactory.getSession();
	}
	
	
	public static void init(){
		try{
		
		HibernateSessionFactory.getSession().clear();
		
		
		}catch(Exception e){
			e.printStackTrace();
		}
	}
	
	public List<HibernateHotel> setHotels(List<Hotel> hotels,String lang) throws SQLException, Exception{
		List<HibernateHotel> ret=null;
		if(hotels!=null && hotels.size()>0){
			ret=new ArrayList<HibernateHotel>();
			for(Hotel hotel:hotels){
				ret.add(this.setHotel(hotel,lang));
			}
		}
		return ret;
	}
	public HibernateHotel setHotel(Hotel hotel,String lang) throws SQLException, Exception{
		HibernateHotel hhotel = new  HibernateHotel();
		HibernateHotelPK pk=new HibernateHotelPK();
		pk.setId(Integer.parseInt(hotel.getId()));
		pk.setLang(lang);
		hhotel.setId(pk);
		hhotel.setName(hotel.getName());
		hhotel.setTypeId(Integer.parseInt(hotel.getType().getId()));
		hhotel.setTypeDes(hotel.getType().getDescription());
		hhotel.setCatId(Integer.parseInt(hotel.getCategory().getId()));
		hhotel.setCatDes(hotel.getCategory().getDescription());
		hhotel.setDestinationId(Integer.parseInt(hotel.getDestination().getId()));
		hhotel.setDestinationDes(hotel.getDestination().getDescription());
		hhotel.setZoneId(Integer.parseInt(hotel.getZone().getId()));
		hhotel.setZoneDes(hotel.getZone().getDescription());
		hhotel.setAddress(hotel.getAddress());
		hhotel.setZipCode(hotel.getZipCode());
		hhotel.setRegion(hotel.getRegion().toString());
		hhotel.setCountry(hotel.getCountry());
		hhotel.setTelephone(hotel.getTelephone());
		hhotel.setFax(hotel.getFax().toString());
		hhotel.setWeb(hotel.getWeb());
		hhotel.setEmail(hotel.getEmail());
		hhotel.setActive(Integer.parseInt(hotel.getActive()));
    	Transaction tx = getSession().beginTransaction();
    	tx.begin();
    	getSession().save(hhotel);
    	tx.commit();
		return hhotel;
	}
				
				
				
}
