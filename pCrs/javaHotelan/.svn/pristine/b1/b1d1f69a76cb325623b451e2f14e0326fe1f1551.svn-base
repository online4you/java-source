package com.photel.hotelan;

import java.io.IOException;
import java.util.Calendar;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;

import com.photel.commonServices.util.AppModelProperties;
import com.photel.data.hotelan.ddbb.HelperHibernateDDBBHotelan;
import com.photel.data.hotelan.ddbb.hibernate.pojo.HibernateHotel;
import com.photel.hotelan.client.HotelanClientStub;
import com.photel.hotelan.client.IrqCathegoryList.IrqCathegoryListResponse;
import com.photel.hotelan.client.IrqDestinationList.IrqDestinationListResponse;
import com.photel.hotelan.client.IrqDestinationZoneList.IrqDestinationZoneListResponse;
import com.photel.hotelan.client.IrqHotelDetailsList.IrqHotelDetailsListResponse;
import com.photel.hotelan.client.IrqRoomTypesList.IrqRoomTypesListResponse;
import com.photel.hotelan.client.IrqVillaAvailablePrice.IrqVillaAvailablePriceResponse;
import com.photel.hotelan.client.IrqZoneList.IrqZoneListResponse;

public class HotelanFacade {
	private static Logger  oLog=Logger.getLogger(HotelanFacade.class);
	private static AppModelProperties prop;
	private HotelanClientStub client = new HotelanClientStub();
	private HelperHibernateDDBBHotelan ddbb=new HelperHibernateDDBBHotelan();
	
	public HotelanFacade() throws IOException{
		prop=prop==null?new AppModelProperties():prop;
	}
	public void updateHotels() throws Exception{
		String[] langs=prop.getProperty("com.photel.HotelanLanguages").split("##");
		List<HibernateHotel> result=null;
		ddbb.deleteImages();
		ddbb.initImagesAutoIncrement();
		for (String lang:langs){
			IrqHotelDetailsListResponse hotels = client.getIrqHotelDetailsList(lang, null, null, null);
			result = ddbb.setHotels(hotels.getHotel(),lang);
		}
		if (result!=null){
			oLog.info(result.size()+" hotels inserted");
		}else{
			oLog.info("0 hotels inserted!!!");
		}
	}
	public void updateLookUps() throws Exception{
		String[] langs=prop.getProperty("com.photel.HotelanLanguages").split("##");
		for (String lang:langs){
			try {
				IrqDestinationListResponse destinos = client.getIrqDestinationList(lang);
				if (destinos!=null && destinos.getDestinations()!=null && destinos.getDestinations().getDestination()!=null){
					if (destinos.getDestinations().getDestination().size()>0){
						ddbb.setDestinations(destinos.getDestinations().getDestination(), lang);
					}
				}
				
			} catch (Exception e) {
				oLog.error(e.getMessage(),e);
			}
			try {
				IrqZoneListResponse zones = client.getIrqZoneList(lang);
				if (zones!=null && zones.getDestinations()!=null && zones.getDestinations().getDestination()!=null){
					if (zones.getDestinations().getDestination().size()>0){
						ddbb.setZones(zones.getDestinations().getDestination(), lang);
					}
				}
				
			} catch (Exception e) {
				oLog.error(e.getMessage(),e);
			}
			try {
				IrqCathegoryListResponse cats = client.getIrqCathegoryList(lang);
				if (cats!=null && cats.getCathegories()!=null && cats.getCathegories().getCathegory()!=null){
					if (cats.getCathegories().getCathegory().size()>0){
						ddbb.setCathegories(cats.getCathegories().getCathegory(), lang);
					}
				}
				
			} catch (Exception e) {
				oLog.error(e.getMessage(),e);
			}
			try {
				IrqRoomTypesListResponse types = client.getIrqRoomTypesList(lang);
				if (types!=null && types.getRoomTypes()!=null && types.getRoomTypes().getRoom()!=null){
					if (types.getRoomTypes().getRoom().size()>0){
						ddbb.setRoomTypes(types.getRoomTypes().getRoom(), lang);
					}
				}
				
			} catch (Exception e) {
				oLog.error(e.getMessage(),e);
			}
			
		}
	}
	public IrqVillaAvailablePriceResponse getVillaAvailable(
			String idioma, String hotelId, String destinationId, String zoneId,
			Calendar arrival, Integer nights, Integer adults, Integer children,
			Integer infants, Boolean details) throws Exception {
		
		return client.getIrqVillaAvailablePrice(idioma, hotelId, destinationId,
				zoneId, arrival, nights, adults, children, infants, details);
	}
	public IrqVillaAvailablePriceResponse getVillaAvailable(
			String idioma, String hotelId, String destinationId, String zoneId,
			Calendar arrival, Integer nights, Integer adults, Integer children,
			Integer infants) throws Exception {
		
		return client.getIrqVillaAvailablePrice(idioma, hotelId, destinationId,
				zoneId, arrival, nights, adults, children, infants);
	}
	public IrqDestinationListResponse getDestinationList(String idioma)
			throws Exception {
		return client.getIrqDestinationList(idioma);
	}
	public IrqDestinationZoneListResponse getDestinationZoneList(
			String idioma, String destinationId) throws Exception {
		return client.getIrqDestinationZoneList(idioma, destinationId);
	}
	
	public IrqZoneListResponse getZoneList(String idioma) throws Exception {
		return client.getIrqZoneList(idioma);
	}
	
	public IrqRoomTypesListResponse getRoomTypesList(String idioma)
			throws Exception {
		return client.getIrqRoomTypesList(idioma);
	}
	public IrqCathegoryListResponse getCathegoryList(String idioma)
			throws Exception {
		return client.getIrqCathegoryList(idioma);
	}
	public Map getBoards() {
		return ddbb.getBoards();
	}
	
}
